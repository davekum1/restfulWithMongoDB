buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.2.RELEASE"
    }
}

plugins {
    id 'com.palantir.jacoco-full-report' version '0.4.0'
}

apply plugin: 'java'
apply plugin: 'docker'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.M7'
    }
}

version = '1.0.0'

jar {
    baseName = 'restfulWithMongoDB'
 }

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
    maven {
        url 'http://repo.spring.io/milestone'
    }
}

dependencies {
    compile('commons-codec:commons-codec')
    compile('commons-validator:commons-validator:1.6')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    compile('com.tngtech.java:junit-dataprovider:1.12.0')
    compile('io.springfox:springfox-swagger2:2.6.1')
    compile('io.springfox:springfox-swagger-ui:2.6.1')
    compile('org.projectlombok:lombok')
    compile('org.springframework.security:spring-security-core')
    compile('org.springframework.security:spring-security-crypto')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.0.RELEASE'

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
    test {
        resources {
            srcDirs = [
                'src/test/resources',
                'src/main/resources',
            ]
            includes = ['**/*']
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
    }
}



task wrapper(type: Wrapper) {
    group = 'build'
    description = 'Build the Gradle wrapper'
    gradleVersion = '4.5'
}

import org.apache.tools.ant.taskdefs.condition.Os
task buildDocker(type: Docker, dependsOn: build) {
    group = 'build'
    description = 'Build a Docker container'
    push = project.hasProperty('push')
    tag = 'test/auth'
    if (Os.isFamily(Os.FAMILY_UNIX))
        dockerBinary = 'sudo docker'
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            from 'agent'
            into stageDir
        }
    }
}

pmd {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    ruleSetFiles = files('src/test/resources/pmd/ruleset.xml')  
    rulePriority = 2    
}

checkstyle {
    config = rootProject.resources.text.fromFile('src/test/resources/checkstyle/checkstyle.xml')
    toolVersion = "7.8.2"
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('src/test/resources/checkstyle/checkstyle-noframes-by-severity.xsl')
    }
}

project.tasks.jacocoTestReport.dependsOn([test, check])